{"display_date": "2010/05/16 06:48:00 -0700", "views_count": "{{post_view_count, 18760529}}", "short_url": "http://post.ly/4djRj", "site_id": 75592, "site": {"subhead": "Data exploration and computer advice.", "full_hostname": "arsatiki.posterous.com", "name": "The Technical", "profile_image_75": "http://files.posterous.com/user_profile_pics/30986/che_baarissa_ilman_paitaa.png", "hostname": "arsatiki", "is_group": false, "time_zone": "Pacific Time (US & Canada)", "current_user_notification_frequency": "", "profile_image_35": "http://files.posterous.com/user_profile_pics/30986/che_baarissa_ilman_paitaa_thumb.png", "comment_permission": 2, "id": 75592, "sharing_enabled": false, "posts_count": 20, "header_image": null, "is_private": false, "current_user_role": ""}, "likes": [], "allowed": true, "body_full": "<p>This article dates from early 2008. I've kept a link to it on my home page, but felt it was now time to update it. Django has moved forward and my understanding of the Django way has moved forward.</p>\r\n<p>If you want more information, Zach Voase has written much about <a href=\"http://blog.zacharyvoase.com/2010/02/03/django-project-conventions/\">Django project conventions on his blog</a>. Please do check that resource out first. I do not agree with all of his points, however. Use your own judgment.</p>\r\n<h1>Almost project-free Django</h1>\r\n<p>In late 2007 I read <a href=\"http://www.b-list.org/weblog/2007/nov/09/projects/\">two</a> <a href=\"http://www.pointy-stick.com/blog/2007/11/09/django-tip-developing-without-projects/\">articles</a> about developing Django without projects. Both James and Malcolm usually know what they are writing about. But surely there must be a point of using projects \u2014 why else would they be there?</p>\r\n<p>The following is a brief summary of my understanding of the matter. I will first explain the different components of a Django environment and then explain how I\u2019ve set things up.</p>\r\n<h2>Django bits</h2>\r\n<p>There are five major components in a Django website: projects, apps, templates, static media, and of course, the database. In a production environment all these can be placed independently. This division forms the framework of my Django setup.</p>\r\n<p>Each component has clearly separate roles in the loosely coupled world of Django. Let\u2019s look at each one.</p>\r\n<h3>The project</h3>\r\n<p>Instead of using the term \u201cproject\u201d, I prefer the term \u201csite configuration\u201d. I was tempted to use \u201c(site) configuration\u201d throughout this text, but at the last stage decided against it. \u201cProject\u201d is what the Django world uses and so will I.</p>\r\n<p>So projects define a configuration. That\u2019s cool. What exactly do they configure? Almost everything.</p>\r\n<ul>\r\n<li>The apps running on the site</li>\r\n<li>The middleware</li>\r\n<li>The details of the database</li>\r\n<li>The URL mapping (although it <em>may</em> be deferred to apps, see below)</li>\r\n<li>The locations of static media</li>\r\n<li>The location of the templates (also may be deferred to apps)</li>\r\n<li>Several smaller details, such as timezones</li>\r\n</ul>\r\n<p>Despite the lenghty list of responsibilities, the projects can be very slim. My project skeleton contains only <code>settings.py</code> and <code>urls.py</code> (and obviously <code>manage.py</code> and <code>__init__.py</code>). Settings import a global settings file called <code>site_settings.py</code> and <code>urls.py</code> includes the URL definitions in the apps themselves.</p>\r\n<p>It is possible to put more stuff in projects: fixtures, templates, even apps. However, I prefer to keep mine clean and only add cruft to a project directory only when it is only related to that project. For example, I\u2019ll add a template directory for those apps that do not have their own templates. More on this below.</p>\r\n<p>Since a project is a configuration, it naturally differs between a production server and a development box. This has implications for the organization of <code>settings.py</code> and also for version control. I am against the idea of using Python if statements to segment the <code>settings.py</code> for different environments.</p>\r\n<p>My current (2010) approach is to have a separate settings-file for each environment and a \"common\" settings file. The environment specific files may import the common settings or choose to ignore them altogether. All these files should be in the version control system.</p>\r\n<p>Another workable solution is presented by Zachary Voase in the article \"<a href=\"http://blog.zacharyvoase.com/2009/09/10/django-settings-flavours/\">Django Settings Flavours\"</a>.</p>\r\n<h3>Apps</h3>\r\n<p>First and foremost, apps provide the models. They are the metaprogrammatic heart of a Django setup. They provide the interface to the database. They give us fields to use in the templates.</p>\r\n<p>Apps also provide views. While views are at the center of the MVT paradigm, you can skip a lot of programming there. Generic views, wrappers to generic views and custom managers will often suffice.</p>\r\n<p>Models, views\u2026 guess what! Apps can also contain templates. The default template loaders \u2014 specified <em>in the project</em> \u2014 are <code>django.template.loaders.filesystem.load_template_source</code> and <code>django.template.loaders.app_directories.load_template_source</code>. The filesystem loader looks in the directories specified with <code>TEMPLATE_DIRS</code>. The latter looks for a <code>templates</code> subdirectory in every installed app. The default order is the one listed. (And <em>of course</em> you can override it.)</p>\r\n<p>This means that your app can offer a set of default templates. In some cases this is just what the doctor ordered. If your application is running on only one site, then there is just one set of templates that make sense. Remember to use some kind of an organization there, however. If you have three apps that all refer to their a template called <code>main.html</code>, two of them probably get the wrong template. <code>app_label/main.html</code> is not a bad naming choice.</p>\r\n<p>Some apps need no templates. Neither <code>django-registration</code> nor <code>django-tagging</code> bother with them. Some apps \u2014like Django admin\u2014 provide templates but allow you to override them.</p>\r\n<p>In most cases apps will also provide an url mapping. This promotes loose coupling. Loose coupling is good. Note that the project can choose not to include those mappings and specify their own. Whether this is a good idea or not depends on the app. Think about the consequences.</p>\r\n<p>Oh yes. The app can also contain managers, forms, template tags and more. Listen to your gut. If it\u2019s app specific, store it in the app. If it\u2019s not, store it somewhere in your <code>PYTHONPATH</code>.</p>\r\n<h3>Templates</h3>\r\n<p>I\u2019ve already yakked about templates and there is not much to add. In my world view templates are specific to either an app or to a project. The latter case is simple. Create a <code>templates</code> subdirectory in your project directory and add it to <code>TEMPLATE_DIRS</code>.</p>\r\n<p>Here\u2019s a tip: I use a Python function to get the absolute directory of the current settings file. This both saves some typing and makes the whole thing slightly more portable. I also recommend using something like the <a href=\"http://pypi.python.org/pypi/path.py\">path.py</a>.</p>\r\n<p>I also have a site-wide template directory just in case the above scheme proves to be insufficent. At the moment it is empty.</p>\r\n<h3>Static media</h3>\r\n<p>For some reason static media with Django is seen as difficult. It does require some thinking and studying, yes. But difficult? No.</p>\r\n<p>The important thing is to remember that on the production server, static media should be served by a real webserver. In other words, static media is deployed to a different location than templates. Or apps. Or projects. The development setup should reflect this.</p>\r\n<p>I am lazy. On my development computer, I use sqlite instead of a real database. When I first wrote this article, I used <a href=\"http://www.djangoproject.com/documentation/static_files/\">django.views.static.serve</a> to serve my static media. In my global development URL mapping file <code>^static/(?P&lt;path&gt;.*)$</code> serves stuff from a directory on my hard drive. <code>MEDIA_URL</code> is <code><a href=\"http://localhost:8000/static/\">http://localhost:8000/static/</a></code>. (Well okay. Plain <code>/static/</code> is slightly better, since it allows people connect to your development box and see the media too.)</p>\r\n<p>These days I am more inclined to use OS X built-in Apache to serve my media files. This reduces the amount of stuff happening in the debug server.</p>\r\n<p>On a production server, things are different. The static stuff might even be on a different server altogether, say <code><a href=\"http://static.phrasebook.hu\">static.phrasebook.hu</a></code>. There is no URL mapping to <code>django.views.static.serve</code>. That is handled by Apache. The relevant configuration is somewhere in the Apache confs.</p>\r\n<p><code>MEDIA_URL</code> <em>is</em> specified, however. It points to <code><a href=\"http://static.phrasebook.hu/\">http://static.phrasebook.hu/</a></code>.</p>\r\n<p>Why this fuss about <code>MEDIA_URL</code>? Because modern Django (post-SVN-revision 5379) gives you, by default, a <code>context_processor</code> that inserts <code>MEDIA_URL</code> into your context. That means you can write <code>&lt;img src=\"{{MEDIA_URL}}pics/ugly.gif\"&gt;</code>. No hard-coded links. All you need to do is change one line in your settings. Very DRY. Read more details in the last section of \u201c<a href=\"http://www.unessa.net/en/hoyci/2008/01/offline-development-with-django/\">Offline Development With Django</a>\u201d.</p>\r\n<p>Just in case you wonder, <code>MEDIA_ROOT</code> is the place where the uploaded stuff ends up in. Some people use it as the <code>doc_root</code> in their static serve URL mapping. I don\u2019t.</p>\r\n<h3>Database</h3>\r\n<p>My opinions on this section have changed over time. Fixtures and testing have made me appreciate more modular database setups. In the end, there is no best setup for everyone. Also, the new multi-DB support in Django 1.2 again shuffles the deck.</p>\r\n<p>Think about the following issues when planning the DB setup:</p>\r\n<ul>\r\n<li>interop between the Django sites -- do they share data or not</li>\r\n<li>the number of Django sites you are developing at the sime time</li>\r\n<li>the requirements of the different deployment environments</li>\r\n<li>scaling &amp; site architecture questions.</li>\r\n</ul>\r\n<p>For private development, these instructions are still usable:</p>\r\n<blockquote class=\"posterous_medium_quote\">\r\n<p>It\u2019s hard to go wrong with the database settings. However, since I use sqlite, my initial Django projects ended up containing the database file as well. In retrospect that was a dumb move.</p>\r\n<p>These days I specify the database in my <code>site_settings.py</code>. Project settings import it.</p>\r\n<p>And if you haven\u2019t guessed it yet, this configuration looks different on the production server.</p>\r\n</blockquote>\r\n<h2>My development setup</h2>\r\n<p>In the previous edition I advocated a single django directory. Since then I have discovered <a href=\"http://pypi.python.org/pypi/virtualenv\">virtualenv</a>. It is hugely superior to my old approach.</p>\r\n<p>In a nutshell, virtualenv creates a sandbox for Python packages. This frees me from worrying about possible incompatibilities when one site wants Django 1.0 and another one lives on the 1.2 beta edge. In conjunction with <a href=\"http://pypi.python.org/pypi/pip/0.7.1\">pip</a> it also frees me from the chore of managing the PYTHONPATH myself. If you are familiar with Python but not virtualenv, think project specific site-packages.</p>\r\n<p>Pip can install most things I need in the project. These include Django itself, any external apps (such as django-registration) and possibly some infrastructure components. These are all stored inside the virtualenv. There are some components I install to the common site-packages directory, namely MySQL wrappers and the like.</p>\r\n<p>Pip also knows how to install stuff from different version control systems. Thus, if you need your own variant of an external app, you can clone or copy it and store it in your own repository. Git and Mercurial shine with this as it is easy to track the original development as well. But it is also possible with SVN, if you are willing to suffer the extra work.</p>\r\n<p>These days, most of my Python work starts with the following steps:</p>\r\n<div><ol class=\"MailOutline\">\r\n<li>Create a git repository</li>\r\n<li>Create a virtualenv. I use mkvirtualenv, which is part of the useful virtualenvwrapper.</li>\r\n<li>Install any packages I need.</li>\r\n<li>pip freeze &gt; requirements.txt, some editing and commit.</li>\r\n<li>If I need to edit the PYTHONPATH, I use the .pth files inside the virtualenv directory. Virtualenvwrapper provides add2virtualenv tool for this.</li>\r\n</ol></div>\r\n<p>Enough gushing about pip. Let's get to the details.</p>\r\n<p>My apps live in their own directory. If I need any them, I'll add the apps directory to the virtualenv's PYTHONPATH. If the apps are packaged and published in PyPI, you can just use pip to fetch them. I have nothing in PyPI yet. Can't really comment on that.</p>\r\n<p>The apps don't have to be inside the django main directory, but this is how I've structured my work. At work we use a slightly different scheme, which fits better with our version control practices.</p>\r\n<ul>\r\n<li>django/            \r\n<ul>\r\n<li>apps/            \r\n<ul>\r\n<li>ceramics_calc/</li>\r\n<li>misc_app/</li>\r\n<li>stufflister/            \r\n<ul>\r\n<li>templates/</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n</li>\r\n<li>sqlite.db</li>\r\n<li> etc/            \r\n<ul>\r\n<li>site_settings.py</li>\r\n</ul>\r\n</li>\r\n<li> projects/            \r\n<ul>\r\n<li> ceramics_site/            \r\n<ul>\r\n<li> templates/            \r\n<ul>\r\n<li>ceramics_calc/*.html</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n</li>\r\n<li>second_site/</li>\r\n<li>yyz/</li>\r\n</ul>\r\n</li>\r\n<li> static/            \r\n<ul>\r\n<li>stufflister/*.{gif,jpg,css}</li>\r\n</ul>\r\n</li>\r\n<li>templates/ </li>\r\n</ul>\r\n</li>\r\n</ul>\r\n<p>The main benefits of this approach are:</p>\r\n<ul class=\"MailOutline\">\r\n<li>I can see my apps at a glance (either <code>ls</code> or from Finder)</li>\r\n<li>I can see my projects at a glance</li>\r\n<li>Apps and projects are decoupled</li>\r\n</ul>\r\n<p>My (virtualenv) <code>PYTHONPATH</code> contains two additional entries:</p>\r\n<p><code>~/django/apps</code> for easy app importing.<br /><code>~/django/etc</code> for miscellaneous stuff that needs importing.</p>\r\n<ul>\r\n</ul>\r\n<p>The Django tutorial uses the name of the project directory a lot. Practically every example begins with <code>mysite</code>: <code>mysite.urls</code>, <code>mysite.views.polls.vote</code>, \u2026 <strong>Don\u2019t do that.</strong> Take control of your namespace! For all intents and purposes, the projects should be anynomous. Apps and settings should not contain any reference to the name of the project directory.</p>\r\n<p>Having your apps in the <code>PYTHONPATH</code> solves this. I recommend it without hesitation.</p>\r\n<p>If you are worried about namespace pollution, you can solve that by creating modules inside <code>apps/</code>.  In the near <code>__future__</code> Python will have a slightly different <code>import</code> policies. See <a href=\"http://www.python.org/dev/peps/pep-0328/\">PEP 328</a>.</p>\r\n<p>As I said above, my views on settings have changed. The following instructions are outdated but I'll leave them here for laughs.</p>\r\n<blockquote>\r\n<p>Finally I\u2019ll introduce my <code>site_settings.py</code>. It defines the following settings:</p>\r\n<code>DEBUG</code> and <code>TEMPLATE_DEBUG</code><br /><span style=\"font-family: monospace;\">ADMINS</span><br /><code>DATABASE_ENGINE</code> and other database settings<br /><code>TIME_ZONE</code> and <code>LANGUAGE_CODE</code><br /><code>MEDIA_URL</code> and <code>MEDIA_ROOT</code><br /><span style=\"font-family: monospace;\">SECRET_KEY</span><br /><code>TEMPLATE_DIRS</code> (which points to the empty <code>~/django/templates</code>)<br /><code>INSTALLED_APPS</code>, which has the usual <code>contrib</code> suspects: <code>auth</code>, <code>contenttypes</code>, <code>sessions</code> and <code>sites</code><br /> \r\n<ul>\r\n</ul>\r\n<p>Furthermore, it imports default settings from Django with:</p>\r\n<div class=\"CodeRay\">\n  <div class=\"code\"><pre>from django.conf.global_settings import *</pre></div>\n</div>\n\r\n<p>Additionally there are some utility functions that allow me to use relative directory names instead of absolute names. There are many ways to solve that problem. One is to use enviroment variables like <code>DJANGOROOT</code> to specify the root (in my case <code>~/django/</code>) and use Python\u2019s <code>os.environ</code>. Possibilities are endless.</p>\r\n<p>The settings for the individual projects start by importing <code>site_settings</code> and then adding to it. Some of the settings I define there are:</p>\r\n<code>ROOT_URLCONF</code> (This is often <code>'urls'</code>. I might move it to <code>site_settings</code>)<br /><code>INSTALLED_APPS = INSTALLED_APPS + (...)</code> for the apps used in this project.<br />And the same for <code>INSTALLED_MIDDLEWARE</code><br /><code>MEDIA_ROOT</code> and <code>MEDIA_URL</code> (Yes, sometimes I <em>do</em> override these)<br /><code>TEMPLATE_DIRS</code>, if necessary.<br /> \r\n<ul>\r\n</ul>\r\n<p>This list depends massively on the actual project.</p>\r\n</blockquote>\r\n<h2>Summary</h2>\r\n<ul class=\"MailOutline\">\r\n<li>Projects are responsible for site configuration</li>\r\n<li>Projects should be anonymous</li>\r\n<li>Apps, projects, templates and static media should (usually) be decoupled from each other.</li>\r\n<li>Addenum: The previous point does not mean that they must be in separate version control repositories.</li>\r\n</ul>\r\n<ul>\r\n</ul>", "post_image_500": null, "id": 18760529, "twitter_account": "", "title": "My Old Django Setup HOWTO", "media": {"images": [], "audio_files": [], "videos": []}, "comments": [], "body_cleaned": "<p>This article dates from early 2008. I've kept a link to it on my home page, but felt it was now time to update it. Django has moved forward and my understanding of the Django way has moved forward.</p>\n<p>If you want more information, Zach Voase has written much about <a href=\"http://blog.zacharyvoase.com/2010/02/03/django-project-conventions/\" rel=\"nofollow\">Django project conventions on his blog</a>. Please do check that resource out first. I do not agree with all of his points, however. Use your own judgment.</p>\n Almost project-free Django \n<p>In late 2007 I read <a href=\"http://www.b-list.org/weblog/2007/nov/09/projects/\" rel=\"nofollow\">two</a> <a href=\"http://www.pointy-stick.com/blog/2007/11/09/django-tip-developing-without-projects/\" rel=\"nofollow\">articles</a> about developing Django without projects. Both James and Malcolm usually know what they are writing about. But surely there must be a point of using projects \u2014 why else would they be there?</p>\n<p>The following is a brief summary of my understanding of the matter. I will first explain the different components of a Django environment and then explain how I\u2019ve set things up.</p>\n Django bits \n<p>There are five major components in a Django website: projects, apps, templates, static media, and of course, the database. In a production environment all these can be placed independently. This division forms the framework of my Django setup.</p>\n<p>Each component has clearly separate roles in the loosely coupled world of Django. Let\u2019s look at each one.</p>\n The project \n<p>Instead of using the term \u201cproject\u201d, I prefer the term \u201csite configuration\u201d. I was tempted to use \u201c(site) configuration\u201d throughout this text, but at the last stage decided against it. \u201cProject\u201d is what the Django world uses and so will I.</p>\n<p>So projects define a configuration. That\u2019s cool. What exactly do they configure? Almost everything.</p>\n<ul>\n<li>The apps running on the site</li>\n<li>The middleware</li>\n<li>The details of the database</li>\n<li>The URL mapping (although it <em>may</em> be deferred to apps, see below)</li>\n<li>The locations of static media</li>\n<li>The location of the templates (also may be deferred to apps)</li>\n<li>Several smaller details, such as timezones</li>\n</ul><p>Despite the lenghty list of responsibilities, the projects can be very slim. My project skeleton contains only <code>settings.py</code> and <code>urls.py</code> (and obviously <code>manage.py</code> and <code>__init__.py</code>). Settings import a global settings file called <code>site_settings.py</code> and <code>urls.py</code> includes the URL definitions in the apps themselves.</p>\n<p>It is possible to put more stuff in projects: fixtures, templates, even apps. However, I prefer to keep mine clean and only add cruft to a project directory only when it is only related to that project. For example, I\u2019ll add a template directory for those apps that do not have their own templates. More on this below.</p>\n<p>Since a project is a configuration, it naturally differs between a production server and a development box. This has implications for the organization of <code>settings.py</code> and also for version control. I am against the idea of using Python if statements to segment the <code>settings.py</code> for different environments.</p>\n<p>My current (2010) approach is to have a separate settings-file for each environment and a \"common\" settings file. The environment specific files may import the common settings or choose to ignore them altogether. All these files should be in the version control system.</p>\n<p>Another workable solution is presented by Zachary Voase in the article \"<a href=\"http://blog.zacharyvoase.com/2009/09/10/django-settings-flavours/\" rel=\"nofollow\">Django Settings Flavours\"</a>.</p>\n Apps \n<p>First and foremost, apps provide the models. They are the metaprogrammatic heart of a Django setup. They provide the interface to the database. They give us fields to use in the templates.</p>\n<p>Apps also provide views. While views are at the center of the MVT paradigm, you can skip a lot of programming there. Generic views, wrappers to generic views and custom managers will often suffice.</p>\n<p>Models, views\u2026 guess what! Apps can also contain templates. The default template loaders \u2014 specified <em>in the project</em> \u2014 are <code>django.template.loaders.filesystem.load_template_source</code> and <code>django.template.loaders.app_directories.load_template_source</code>. The filesystem loader looks in the directories specified with <code>TEMPLATE_DIRS</code>. The latter looks for a <code>templates</code> subdirectory in every installed app. The default order is the one listed. (And <em>of course</em> you can override it.)</p>\n<p>This means that your app can offer a set of default templates. In some cases this is just what the doctor ordered. If your application is running on only one site, then there is just one set of templates that make sense. Remember to use some kind of an organization there, however. If you have three apps that all refer to their a template called <code>main.html</code>, two of them probably get the wrong template. <code>app_label/main.html</code> is not a bad naming choice.</p>\n<p>Some apps need no templates. Neither <code>django-registration</code> nor <code>django-tagging</code> bother with them. Some apps \u2014like Django admin\u2014 provide templates but allow you to override them.</p>\n<p>In most cases apps will also provide an url mapping. This promotes loose coupling. Loose coupling is good. Note that the project can choose not to include those mappings and specify their own. Whether this is a good idea or not depends on the app. Think about the consequences.</p>\n<p>Oh yes. The app can also contain managers, forms, template tags and more. Listen to your gut. If it\u2019s app specific, store it in the app. If it\u2019s not, store it somewhere in your <code>PYTHONPATH</code>.</p>\n Templates \n<p>I\u2019ve already yakked about templates and there is not much to add. In my world view templates are specific to either an app or to a project. The latter case is simple. Create a <code>templates</code> subdirectory in your project directory and add it to <code>TEMPLATE_DIRS</code>.</p>\n<p>Here\u2019s a tip: I use a Python function to get the absolute directory of the current settings file. This both saves some typing and makes the whole thing slightly more portable. I also recommend using something like the <a href=\"http://pypi.python.org/pypi/path.py\" rel=\"nofollow\">path.py</a>.</p>\n<p>I also have a site-wide template directory just in case the above scheme proves to be insufficent. At the moment it is empty.</p>\n Static media \n<p>For some reason static media with Django is seen as difficult. It does require some thinking and studying, yes. But difficult? No.</p>\n<p>The important thing is to remember that on the production server, static media should be served by a real webserver. In other words, static media is deployed to a different location than templates. Or apps. Or projects. The development setup should reflect this.</p>\n<p>I am lazy. On my development computer, I use sqlite instead of a real database. When I first wrote this article, I used <a href=\"http://www.djangoproject.com/documentation/static_files/\" rel=\"nofollow\">django.views.static.serve</a> to serve my static media. In my global development URL mapping file <code>^static/(?P.*)$</code> serves stuff from a directory on my hard drive. <code>MEDIA_URL</code> is <code><a href=\"http://localhost:8000/static/\" rel=\"nofollow\">http://localhost:8000/static/</a></code>. (Well okay. Plain <code>/static/</code> is slightly better, since it allows people connect to your development box and see the media too.)</p>\n<p>These days I am more inclined to use OS X built-in Apache to serve my media files. This reduces the amount of stuff happening in the debug server.</p>\n<p>On a production server, things are different. The static stuff might even be on a different server altogether, say <code><a href=\"http://static.phrasebook.hu\" rel=\"nofollow\">static.phrasebook.hu</a></code>. There is no URL mapping to <code>django.views.static.serve</code>. That is handled by Apache. The relevant configuration is somewhere in the Apache confs.</p>\n<p><code>MEDIA_URL</code> <em>is</em> specified, however. It points to <code><a href=\"http://static.phrasebook.hu/\" rel=\"nofollow\">http://static.phrasebook.hu/</a></code>.</p>\n<p>Why this fuss about <code>MEDIA_URL</code>? Because modern Django (post-SVN-revision 5379) gives you, by default, a <code>context_processor</code> that inserts <code>MEDIA_URL</code> into your context. That means you can write <code><img src=\"%7B%7BMEDIA_URL%7D%7Dpics/ugly.gif\" /></code>. No hard-coded links. All you need to do is change one line in your settings. Very DRY. Read more details in the last section of \u201c<a href=\"http://www.unessa.net/en/hoyci/2008/01/offline-development-with-django/\" rel=\"nofollow\">Offline Development With Django</a>\u201d.</p>\n<p>Just in case you wonder, <code>MEDIA_ROOT</code> is the place where the uploaded stuff ends up in. Some people use it as the <code>doc_root</code> in their static serve URL mapping. I don\u2019t.</p>\n Database \n<p>My opinions on this section have changed over time. Fixtures and testing have made me appreciate more modular database setups. In the end, there is no best setup for everyone. Also, the new multi-DB support in Django 1.2 again shuffles the deck.</p>\n<p>Think about the following issues when planning the DB setup:</p>\n<ul>\n<li>interop between the Django sites -- do they share data or not</li>\n<li>the number of Django sites you are developing at the sime time</li>\n<li>the requirements of the different deployment environments</li>\n<li>scaling &amp; site architecture questions.</li>\n</ul><p>For private development, these instructions are still usable:</p>\n<blockquote class=\"posterous_medium_quote\">\n<p>It\u2019s hard to go wrong with the database settings. However, since I use sqlite, my initial Django projects ended up containing the database file as well. In retrospect that was a dumb move.</p>\n<p>These days I specify the database in my <code>site_settings.py</code>. Project settings import it.</p>\n<p>And if you haven\u2019t guessed it yet, this configuration looks different on the production server.</p>\n</blockquote>\n My development setup \n<p>In the previous edition I advocated a single django directory. Since then I have discovered <a href=\"http://pypi.python.org/pypi/virtualenv\" rel=\"nofollow\">virtualenv</a>. It is hugely superior to my old approach.</p>\n<p>In a nutshell, virtualenv creates a sandbox for Python packages. This frees me from worrying about possible incompatibilities when one site wants Django 1.0 and another one lives on the 1.2 beta edge. In conjunction with <a href=\"http://pypi.python.org/pypi/pip/0.7.1\" rel=\"nofollow\">pip</a> it also frees me from the chore of managing the PYTHONPATH myself. If you are familiar with Python but not virtualenv, think project specific site-packages.</p>\n<p>Pip can install most things I need in the project. These include Django itself, any external apps (such as django-registration) and possibly some infrastructure components. These are all stored inside the virtualenv. There are some components I install to the common site-packages directory, namely MySQL wrappers and the like.</p>\n<p>Pip also knows how to install stuff from different version control systems. Thus, if you need your own variant of an external app, you can clone or copy it and store it in your own repository. Git and Mercurial shine with this as it is easy to track the original development as well. But it is also possible with SVN, if you are willing to suffer the extra work.</p>\n<p>These days, most of my Python work starts with the following steps:</p>\n<div><ol>\n<li>Create a git repository</li>\n<li>Create a virtualenv. I use mkvirtualenv, which is part of the useful virtualenvwrapper.</li>\n<li>Install any packages I need.</li>\n<li>pip freeze &gt; requirements.txt, some editing and commit.</li>\n<li>If I need to edit the PYTHONPATH, I use the .pth files inside the virtualenv directory. Virtualenvwrapper provides add2virtualenv tool for this.</li>\n</ol></div>\n<p>Enough gushing about pip. Let's get to the details.</p>\n<p>My apps live in their own directory. If I need any them, I'll add the apps directory to the virtualenv's PYTHONPATH. If the apps are packaged and published in PyPI, you can just use pip to fetch them. I have nothing in PyPI yet. Can't really comment on that.</p>\n<p>The apps don't have to be inside the django main directory, but this is how I've structured my work. At work we use a slightly different scheme, which fits better with our version control practices.</p>\n<ul>\n<li>django/            \n<ul>\n<li>apps/            \n<ul>\n<li>ceramics_calc/</li>\n<li>misc_app/</li>\n<li>stufflister/            \n<ul>\n<li>templates/</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>sqlite.db</li>\n<li> etc/            \n<ul>\n<li>site_settings.py</li>\n</ul>\n</li>\n<li> projects/            \n<ul>\n<li> ceramics_site/            \n<ul>\n<li> templates/            \n<ul>\n<li>ceramics_calc/*.html</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>second_site/</li>\n<li>yyz/</li>\n</ul>\n</li>\n<li> static/            \n<ul>\n<li>stufflister/*.{gif,jpg,css}</li>\n</ul>\n</li>\n<li>templates/ </li>\n</ul>\n</li>\n</ul><p>The main benefits of this approach are:</p>\n<ul>\n<li>I can see my apps at a glance (either <code>ls</code> or from Finder)</li>\n<li>I can see my projects at a glance</li>\n<li>Apps and projects are decoupled</li>\n</ul><p>My (virtualenv) <code>PYTHONPATH</code> contains two additional entries:</p>\n<p><code>~/django/apps</code> for easy app importing.<br /><code>~/django/etc</code> for miscellaneous stuff that needs importing.</p>\n<p>The Django tutorial uses the name of the project directory a lot. Practically every example begins with <code>mysite</code>: <code>mysite.urls</code>, <code>mysite.views.polls.vote</code>, \u2026 <strong>Don\u2019t do that.</strong> Take control of your namespace! For all intents and purposes, the projects should be anynomous. Apps and settings should not contain any reference to the name of the project directory.</p>\n<p>Having your apps in the <code>PYTHONPATH</code> solves this. I recommend it without hesitation.</p>\n<p>If you are worried about namespace pollution, you can solve that by creating modules inside <code>apps/</code>.  In the near <code>__future__</code> Python will have a slightly different <code>import</code> policies. See <a href=\"http://www.python.org/dev/peps/pep-0328/\" rel=\"nofollow\">PEP 328</a>.</p>\n<p>As I said above, my views on settings have changed. The following instructions are outdated but I'll leave them here for laughs.</p>\n<blockquote>\n<p>Finally I\u2019ll introduce my <code>site_settings.py</code>. It defines the following settings:</p>\n<code>DEBUG</code> and <code>TEMPLATE_DEBUG</code><br /><span>ADMINS</span><br /><code>DATABASE_ENGINE</code> and other database settings<br /><code>TIME_ZONE</code> and <code>LANGUAGE_CODE</code><br /><code>MEDIA_URL</code> and <code>MEDIA_ROOT</code><br /><span>SECRET_KEY</span><br /><code>TEMPLATE_DIRS</code> (which points to the empty <code>~/django/templates</code>)<br /><code>INSTALLED_APPS</code>, which has the usual <code>contrib</code> suspects: <code>auth</code>, <code>contenttypes</code>, <code>sessions</code> and <code>sites</code><br /><p>Furthermore, it imports default settings from Django with:</p>\n<div class=\"CodeRay\">\n  <div class=\"code\"><pre>from django.conf.global_settings import *</pre></div>\n</div></p><p><p>Additionally there are some utility functions that allow me to use relative directory names instead of absolute names. There are many ways to solve that problem. One is to use enviroment variables like <code>DJANGOROOT</code> to specify the root (in my case <code>~/django/</code>) and use Python\u2019s <code>os.environ</code>. Possibilities are endless.</p>\n<p>The settings for the individual projects start by importing <code>site_settings</code> and then adding to it. Some of the settings I define there are:</p>\n<code>ROOT_URLCONF</code> (This is often <code>'urls'</code>. I might move it to <code>site_settings</code>)<br /><code>INSTALLED_APPS = INSTALLED_APPS + (...)</code> for the apps used in this project.<br />And the same for <code>INSTALLED_MIDDLEWARE</code><br /><code>MEDIA_ROOT</code> and <code>MEDIA_URL</code> (Yes, sometimes I <em>do</em> override these)<br /><code>TEMPLATE_DIRS</code>, if necessary.<br /><p>This list depends massively on the actual project.</p>\n</blockquote>\n Summary \n<ul>\n<li>Projects are responsible for site configuration</li>\n<li>Projects should be anonymous</li>\n<li>Apps, projects, templates and static media should (usually) be decoupled from each other.</li>\n<li>Addenum: The previous point does not mean that they must be in separate version control repositories.</li>\n</ul>", "draft": false, "full_url": "http://arsatiki.posterous.com/my-old-django-setup-howto", "scheduled": false, "tags": [], "body_html": "<p>This article dates from early 2008. I've kept a link to it on my home page, but felt it was now time to update it. Django has moved forward and my understanding of the Django way has moved forward.</p>\r\n<p>If you want more information, Zach Voase has written much about <a href=\"http://blog.zacharyvoase.com/2010/02/03/django-project-conventions/\">Django project conventions on his blog</a>. Please do check that resource out first. I do not agree with all of his points, however. Use your own judgment.</p>\r\n<h1>Almost project-free Django</h1>\r\n<p>In late 2007 I read <a href=\"http://www.b-list.org/weblog/2007/nov/09/projects/\">two</a> <a href=\"http://www.pointy-stick.com/blog/2007/11/09/django-tip-developing-without-projects/\">articles</a> about developing Django without projects. Both James and Malcolm usually know what they are writing about. But surely there must be a point of using projects \u2014 why else would they be there?</p>\r\n<p>The following is a brief summary of my understanding of the matter. I will first explain the different components of a Django environment and then explain how I\u2019ve set things up.</p>\r\n<h2>Django bits</h2>\r\n<p>There are five major components in a Django website: projects, apps, templates, static media, and of course, the database. In a production environment all these can be placed independently. This division forms the framework of my Django setup.</p>\r\n<p>Each component has clearly separate roles in the loosely coupled world of Django. Let\u2019s look at each one.</p>\r\n<h3>The project</h3>\r\n<p>Instead of using the term \u201cproject\u201d, I prefer the term \u201csite configuration\u201d. I was tempted to use \u201c(site) configuration\u201d throughout this text, but at the last stage decided against it. \u201cProject\u201d is what the Django world uses and so will I.</p>\r\n<p>So projects define a configuration. That\u2019s cool. What exactly do they configure? Almost everything.</p>\r\n<ul>\r\n<li>The apps running on the site</li>\r\n<li>The middleware</li>\r\n<li>The details of the database</li>\r\n<li>The URL mapping (although it <em>may</em> be deferred to apps, see below)</li>\r\n<li>The locations of static media</li>\r\n<li>The location of the templates (also may be deferred to apps)</li>\r\n<li>Several smaller details, such as timezones</li>\r\n</ul>\r\n<p>Despite the lenghty list of responsibilities, the projects can be very slim. My project skeleton contains only <code>settings.py</code> and <code>urls.py</code> (and obviously <code>manage.py</code> and <code>__init__.py</code>). Settings import a global settings file called <code>site_settings.py</code> and <code>urls.py</code> includes the URL definitions in the apps themselves.</p>\r\n<p>It is possible to put more stuff in projects: fixtures, templates, even apps. However, I prefer to keep mine clean and only add cruft to a project directory only when it is only related to that project. For example, I\u2019ll add a template directory for those apps that do not have their own templates. More on this below.</p>\r\n<p>Since a project is a configuration, it naturally differs between a production server and a development box. This has implications for the organization of <code>settings.py</code> and also for version control. I am against the idea of using Python if statements to segment the <code>settings.py</code> for different environments.</p>\r\n<p>My current (2010) approach is to have a separate settings-file for each environment and a \"common\" settings file. The environment specific files may import the common settings or choose to ignore them altogether. All these files should be in the version control system.</p>\r\n<p>Another workable solution is presented by Zachary Voase in the article \"<a href=\"http://blog.zacharyvoase.com/2009/09/10/django-settings-flavours/\">Django Settings Flavours\"</a>.</p>\r\n<h3>Apps</h3>\r\n<p>First and foremost, apps provide the models. They are the metaprogrammatic heart of a Django setup. They provide the interface to the database. They give us fields to use in the templates.</p>\r\n<p>Apps also provide views. While views are at the center of the MVT paradigm, you can skip a lot of programming there. Generic views, wrappers to generic views and custom managers will often suffice.</p>\r\n<p>Models, views\u2026 guess what! Apps can also contain templates. The default template loaders \u2014 specified <em>in the project</em> \u2014 are <code>django.template.loaders.filesystem.load_template_source</code> and <code>django.template.loaders.app_directories.load_template_source</code>. The filesystem loader looks in the directories specified with <code>TEMPLATE_DIRS</code>. The latter looks for a <code>templates</code> subdirectory in every installed app. The default order is the one listed. (And <em>of course</em> you can override it.)</p>\r\n<p>This means that your app can offer a set of default templates. In some cases this is just what the doctor ordered. If your application is running on only one site, then there is just one set of templates that make sense. Remember to use some kind of an organization there, however. If you have three apps that all refer to their a template called <code>main.html</code>, two of them probably get the wrong template. <code>app_label/main.html</code> is not a bad naming choice.</p>\r\n<p>Some apps need no templates. Neither <code>django-registration</code> nor <code>django-tagging</code> bother with them. Some apps \u2014like Django admin\u2014 provide templates but allow you to override them.</p>\r\n<p>In most cases apps will also provide an url mapping. This promotes loose coupling. Loose coupling is good. Note that the project can choose not to include those mappings and specify their own. Whether this is a good idea or not depends on the app. Think about the consequences.</p>\r\n<p>Oh yes. The app can also contain managers, forms, template tags and more. Listen to your gut. If it\u2019s app specific, store it in the app. If it\u2019s not, store it somewhere in your <code>PYTHONPATH</code>.</p>\r\n<h3>Templates</h3>\r\n<p>I\u2019ve already yakked about templates and there is not much to add. In my world view templates are specific to either an app or to a project. The latter case is simple. Create a <code>templates</code> subdirectory in your project directory and add it to <code>TEMPLATE_DIRS</code>.</p>\r\n<p>Here\u2019s a tip: I use a Python function to get the absolute directory of the current settings file. This both saves some typing and makes the whole thing slightly more portable. I also recommend using something like the <a href=\"http://pypi.python.org/pypi/path.py\">path.py</a>.</p>\r\n<p>I also have a site-wide template directory just in case the above scheme proves to be insufficent. At the moment it is empty.</p>\r\n<h3>Static media</h3>\r\n<p>For some reason static media with Django is seen as difficult. It does require some thinking and studying, yes. But difficult? No.</p>\r\n<p>The important thing is to remember that on the production server, static media should be served by a real webserver. In other words, static media is deployed to a different location than templates. Or apps. Or projects. The development setup should reflect this.</p>\r\n<p>I am lazy. On my development computer, I use sqlite instead of a real database. When I first wrote this article, I used <a href=\"http://www.djangoproject.com/documentation/static_files/\">django.views.static.serve</a> to serve my static media. In my global development URL mapping file <code>^static/(?P&lt;path&gt;.*)$</code> serves stuff from a directory on my hard drive. <code>MEDIA_URL</code> is <code><a href=\"http://localhost:8000/static/\">http://localhost:8000/static/</a></code>. (Well okay. Plain <code>/static/</code> is slightly better, since it allows people connect to your development box and see the media too.)</p>\r\n<p>These days I am more inclined to use OS X built-in Apache to serve my media files. This reduces the amount of stuff happening in the debug server.</p>\r\n<p>On a production server, things are different. The static stuff might even be on a different server altogether, say <code><a href=\"http://static.phrasebook.hu\">static.phrasebook.hu</a></code>. There is no URL mapping to <code>django.views.static.serve</code>. That is handled by Apache. The relevant configuration is somewhere in the Apache confs.</p>\r\n<p><code>MEDIA_URL</code> <em>is</em> specified, however. It points to <code><a href=\"http://static.phrasebook.hu/\">http://static.phrasebook.hu/</a></code>.</p>\r\n<p>Why this fuss about <code>MEDIA_URL</code>? Because modern Django (post-SVN-revision 5379) gives you, by default, a <code>context_processor</code> that inserts <code>MEDIA_URL</code> into your context. That means you can write <code>&lt;img src=\"{{MEDIA_URL}}pics/ugly.gif\"&gt;</code>. No hard-coded links. All you need to do is change one line in your settings. Very DRY. Read more details in the last section of \u201c<a href=\"http://www.unessa.net/en/hoyci/2008/01/offline-development-with-django/\">Offline Development With Django</a>\u201d.</p>\r\n<p>Just in case you wonder, <code>MEDIA_ROOT</code> is the place where the uploaded stuff ends up in. Some people use it as the <code>doc_root</code> in their static serve URL mapping. I don\u2019t.</p>\r\n<h3>Database</h3>\r\n<p>My opinions on this section have changed over time. Fixtures and testing have made me appreciate more modular database setups. In the end, there is no best setup for everyone. Also, the new multi-DB support in Django 1.2 again shuffles the deck.</p>\r\n<p>Think about the following issues when planning the DB setup:</p>\r\n<ul>\r\n<li>interop between the Django sites -- do they share data or not</li>\r\n<li>the number of Django sites you are developing at the sime time</li>\r\n<li>the requirements of the different deployment environments</li>\r\n<li>scaling &amp; site architecture questions.</li>\r\n</ul>\r\n<p>For private development, these instructions are still usable:</p>\r\n<blockquote class=\"posterous_medium_quote\">\r\n<p>It\u2019s hard to go wrong with the database settings. However, since I use sqlite, my initial Django projects ended up containing the database file as well. In retrospect that was a dumb move.</p>\r\n<p>These days I specify the database in my <code>site_settings.py</code>. Project settings import it.</p>\r\n<p>And if you haven\u2019t guessed it yet, this configuration looks different on the production server.</p>\r\n</blockquote>\r\n<h2>My development setup</h2>\r\n<p>In the previous edition I advocated a single django directory. Since then I have discovered <a href=\"http://pypi.python.org/pypi/virtualenv\">virtualenv</a>. It is hugely superior to my old approach.</p>\r\n<p>In a nutshell, virtualenv creates a sandbox for Python packages. This frees me from worrying about possible incompatibilities when one site wants Django 1.0 and another one lives on the 1.2 beta edge. In conjunction with <a href=\"http://pypi.python.org/pypi/pip/0.7.1\">pip</a> it also frees me from the chore of managing the PYTHONPATH myself. If you are familiar with Python but not virtualenv, think project specific site-packages.</p>\r\n<p>Pip can install most things I need in the project. These include Django itself, any external apps (such as django-registration) and possibly some infrastructure components. These are all stored inside the virtualenv. There are some components I install to the common site-packages directory, namely MySQL wrappers and the like.</p>\r\n<p>Pip also knows how to install stuff from different version control systems. Thus, if you need your own variant of an external app, you can clone or copy it and store it in your own repository. Git and Mercurial shine with this as it is easy to track the original development as well. But it is also possible with SVN, if you are willing to suffer the extra work.</p>\r\n<p>These days, most of my Python work starts with the following steps:</p>\r\n<div><ol class=\"MailOutline\">\r\n<li>Create a git repository</li>\r\n<li>Create a virtualenv. I use mkvirtualenv, which is part of the useful virtualenvwrapper.</li>\r\n<li>Install any packages I need.</li>\r\n<li>pip freeze &gt; requirements.txt, some editing and commit.</li>\r\n<li>If I need to edit the PYTHONPATH, I use the .pth files inside the virtualenv directory. Virtualenvwrapper provides add2virtualenv tool for this.</li>\r\n</ol></div>\r\n<p>Enough gushing about pip. Let's get to the details.</p>\r\n<p>My apps live in their own directory. If I need any them, I'll add the apps directory to the virtualenv's PYTHONPATH. If the apps are packaged and published in PyPI, you can just use pip to fetch them. I have nothing in PyPI yet. Can't really comment on that.</p>\r\n<p>The apps don't have to be inside the django main directory, but this is how I've structured my work. At work we use a slightly different scheme, which fits better with our version control practices.</p>\r\n<ul>\r\n<li>django/            \r\n<ul>\r\n<li>apps/            \r\n<ul>\r\n<li>ceramics_calc/</li>\r\n<li>misc_app/</li>\r\n<li>stufflister/            \r\n<ul>\r\n<li>templates/</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n</li>\r\n<li>sqlite.db</li>\r\n<li> etc/            \r\n<ul>\r\n<li>site_settings.py</li>\r\n</ul>\r\n</li>\r\n<li> projects/            \r\n<ul>\r\n<li> ceramics_site/            \r\n<ul>\r\n<li> templates/            \r\n<ul>\r\n<li>ceramics_calc/*.html</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n</li>\r\n<li>second_site/</li>\r\n<li>yyz/</li>\r\n</ul>\r\n</li>\r\n<li> static/            \r\n<ul>\r\n<li>stufflister/*.{gif,jpg,css}</li>\r\n</ul>\r\n</li>\r\n<li>templates/ </li>\r\n</ul>\r\n</li>\r\n</ul>\r\n<p>The main benefits of this approach are:</p>\r\n<ul class=\"MailOutline\">\r\n<li>I can see my apps at a glance (either <code>ls</code> or from Finder)</li>\r\n<li>I can see my projects at a glance</li>\r\n<li>Apps and projects are decoupled</li>\r\n</ul>\r\n<p>My (virtualenv) <code>PYTHONPATH</code> contains two additional entries:</p>\r\n<p><code>~/django/apps</code> for easy app importing.<br /><code>~/django/etc</code> for miscellaneous stuff that needs importing.</p>\r\n<ul>\r\n</ul>\r\n<p>The Django tutorial uses the name of the project directory a lot. Practically every example begins with <code>mysite</code>: <code>mysite.urls</code>, <code>mysite.views.polls.vote</code>, \u2026 <strong>Don\u2019t do that.</strong> Take control of your namespace! For all intents and purposes, the projects should be anynomous. Apps and settings should not contain any reference to the name of the project directory.</p>\r\n<p>Having your apps in the <code>PYTHONPATH</code> solves this. I recommend it without hesitation.</p>\r\n<p>If you are worried about namespace pollution, you can solve that by creating modules inside <code>apps/</code>.  In the near <code>__future__</code> Python will have a slightly different <code>import</code> policies. See <a href=\"http://www.python.org/dev/peps/pep-0328/\">PEP 328</a>.</p>\r\n<p>As I said above, my views on settings have changed. The following instructions are outdated but I'll leave them here for laughs.</p>\r\n<blockquote>\r\n<p>Finally I\u2019ll introduce my <code>site_settings.py</code>. It defines the following settings:</p>\r\n<code>DEBUG</code> and <code>TEMPLATE_DEBUG</code><br /><span style=\"font-family: monospace;\">ADMINS</span><br /><code>DATABASE_ENGINE</code> and other database settings<br /><code>TIME_ZONE</code> and <code>LANGUAGE_CODE</code><br /><code>MEDIA_URL</code> and <code>MEDIA_ROOT</code><br /><span style=\"font-family: monospace;\">SECRET_KEY</span><br /><code>TEMPLATE_DIRS</code> (which points to the empty <code>~/django/templates</code>)<br /><code>INSTALLED_APPS</code>, which has the usual <code>contrib</code> suspects: <code>auth</code>, <code>contenttypes</code>, <code>sessions</code> and <code>sites</code><br /> \r\n<ul>\r\n</ul>\r\n<p>Furthermore, it imports default settings from Django with:</p>\r\n<div class=\"CodeRay\">\n  <div class=\"code\"><pre>from django.conf.global_settings import *</pre></div>\n</div>\n\r\n<p>Additionally there are some utility functions that allow me to use relative directory names instead of absolute names. There are many ways to solve that problem. One is to use enviroment variables like <code>DJANGOROOT</code> to specify the root (in my case <code>~/django/</code>) and use Python\u2019s <code>os.environ</code>. Possibilities are endless.</p>\r\n<p>The settings for the individual projects start by importing <code>site_settings</code> and then adding to it. Some of the settings I define there are:</p>\r\n<code>ROOT_URLCONF</code> (This is often <code>'urls'</code>. I might move it to <code>site_settings</code>)<br /><code>INSTALLED_APPS = INSTALLED_APPS + (...)</code> for the apps used in this project.<br />And the same for <code>INSTALLED_MIDDLEWARE</code><br /><code>MEDIA_ROOT</code> and <code>MEDIA_URL</code> (Yes, sometimes I <em>do</em> override these)<br /><code>TEMPLATE_DIRS</code>, if necessary.<br /> \r\n<ul>\r\n</ul>\r\n<p>This list depends massively on the actual project.</p>\r\n</blockquote>\r\n<h2>Summary</h2>\r\n<ul class=\"MailOutline\">\r\n<li>Projects are responsible for site configuration</li>\r\n<li>Projects should be anonymous</li>\r\n<li>Apps, projects, templates and static media should (usually) be decoupled from each other.</li>\r\n<li>Addenum: The previous point does not mean that they must be in separate version control repositories.</li>\r\n</ul>\r\n<ul>\r\n</ul>", "locations": [], "user": {"body": "I am much more prolific in Twitter. See http://twitter.com/arsatiki\r\n", "profile_pic": "http://files.posterous.com/user_profile_pics/30986/che_baarissa_ilman_paitaa.png", "display_name": "Antti Rasinen", "firstname": "Antti", "lastname": "Rasinen", "profile_image_35": "http://files.posterous.com/user_profile_pics/30986/che_baarissa_ilman_paitaa_thumb.png", "last_activity": "2012/02/23 08:30:10 -0800", "nickname": "Antti", "id": 29785, "profile_url": "http://posterous.com/users/KPdfsrBQmB"}, "date": "2010-05-16 16:48:00+03:00", "replies_count": 0, "body_excerpt": "This article dates from early 2008. I've kept a link to it on my home page, but felt it was now time to update it. Django has moved forward and my understanding of the Django way has moved forward. If you want more information, Zach Voase has writ...", "slug": "my-old-django-setup-howto", "is_private": false, "likes_count": 0, "privatestring": "grhkjazfkF", "number_of_comments": 0, "comments_count": 0, "current_member": "", "author_display_name": "Antti Rasinen", "post_image_115": null, "is_owned_by_current_user": null}