{"display_date": "2007/08/09 18:33:30 -0700", "views_count": 359, "short_url": "http://post.ly/AKl1h", "site_id": 1292332, "site": {"subhead": null, "full_hostname": "pita.posterous.com", "name": "Pythonic Introduction to Algorithms", "profile_image_75": "http://files.posterous.com/user_profile_pics/30986/che_baarissa_ilman_paitaa.png", "hostname": "pita", "is_group": false, "time_zone": "Pacific Time (US & Canada)", "current_user_notification_frequency": "", "profile_image_35": "http://files.posterous.com/user_profile_pics/30986/che_baarissa_ilman_paitaa_thumb.png", "comment_permission": 2, "id": 1292332, "sharing_enabled": false, "posts_count": 0, "header_image": null, "is_private": false, "current_user_role": ""}, "likes": [], "allowed": true, "body_full": "<p>The first few chapters are 100% pure introduction. Definitions, discussion, algorithm analysis etc. Useful stuff and worth reviewing once in a while.</p>\n\n<p>There are two sorting algorithms given: insertion sort and merge sort. Given that Python lists have <code>sort</code> built-in, reproducing them precisely here is somewhat silly. So I\u2019ll do some a simple variation.</p>\n\n<p>For example, if we do not require that the insertion sort sorts in place, we can use it to sort iterables into a new list. There is a builtin for that as well, namely <code>sorted</code>. Whatever I do, it seems to be already implemented.</p>\n\n<code class=\"block\">def insertion_sort(it):\n    \"\"\"insertion_sort(iterable) -&gt; sorted list\n\n    Note that this is very much like the builtin function sorted.\n\n    &gt;&gt;&gt; insertion_sort((10, 1, 3, 5, 2))\n    [1, 2, 3, 5, 10]\n\n    &gt;&gt;&gt; insertion_sort((31, 41, 59, 26, 41, 58))\n    [26, 31, 41, 41, 58, 59]\n\n    \"\"\"\n\n    it = iter(it)\n    result = [it.next()]\n    for index, val in enumerate(it):\n        i = index\n        result.append(val)\n        while i &gt;= 0 and result[i] &gt; val:\n            result[i+1], i = result[i], i-1\n        result[i+1] = val\n\n    return result</code>\n\n<p>There\u2019s a lovely sentence at the start of the summary:</p>\n\n<blockquote class=\"posterous_short_quote\">\n  <p>A good algorithm is like a sharp knife \u2014 it does exactly what it \n  is supposed to do with a minimum amount of applied effort.</p>\n</blockquote>", "post_image_500": null, "id": 17759459, "twitter_account": "", "title": "First Chapters", "media": {"images": [], "audio_files": [], "videos": []}, "comments": [], "body_cleaned": "<p>The first few chapters are 100% pure introduction. Definitions, discussion, algorithm analysis etc. Useful stuff and worth reviewing once in a while.</p></p><p><p>There are two sorting algorithms given: insertion sort and merge sort. Given that Python lists have <code>sort</code> built-in, reproducing them precisely here is somewhat silly. So I\u2019ll do some a simple variation.</p></p><p><p>For example, if we do not require that the insertion sort sorts in place, we can use it to sort iterables into a new list. There is a builtin for that as well, namely <code>sorted</code>. Whatever I do, it seems to be already implemented.</p></p><p><code>def insertion_sort(it):\n    \"\"\"insertion_sort(iterable) -&gt; sorted list</p><p>Note that this is very much like the builtin function sorted.</p><p>&gt;&gt;&gt; insertion_sort((10, 1, 3, 5, 2))\n    [1, 2, 3, 5, 10]</p><p>&gt;&gt;&gt; insertion_sort((31, 41, 59, 26, 41, 58))\n    [26, 31, 41, 41, 58, 59]</p><p>\"\"\"</p><p>it = iter(it)\n    result = [it.next()]\n    for index, val in enumerate(it):\n        i = index\n        result.append(val)\n        while i &gt;= 0 and result[i] &gt; val:\n            result[i+1], i = result[i], i-1\n        result[i+1] = val</p><p>return result</code></p><p><p>There\u2019s a lovely sentence at the start of the summary:</p></p><p><blockquote class=\"posterous_short_quote\">\n  <p>A good algorithm is like a sharp knife \u2014 it does exactly what it \n  is supposed to do with a minimum amount of applied effort.</p>\n</blockquote>", "draft": false, "full_url": "http://pita.posterous.com/first-chapters", "scheduled": false, "tags": [], "body_html": "<p>The first few chapters are 100% pure introduction. Definitions, discussion, algorithm analysis etc. Useful stuff and worth reviewing once in a while.</p>\n\n<p>There are two sorting algorithms given: insertion sort and merge sort. Given that Python lists have <code>sort</code> built-in, reproducing them precisely here is somewhat silly. So I\u2019ll do some a simple variation.</p>\n\n<p>For example, if we do not require that the insertion sort sorts in place, we can use it to sort iterables into a new list. There is a builtin for that as well, namely <code>sorted</code>. Whatever I do, it seems to be already implemented.</p>\n\n<code class=\"block\">def insertion_sort(it):\n    \"\"\"insertion_sort(iterable) -&gt; sorted list\n\n    Note that this is very much like the builtin function sorted.\n\n    &gt;&gt;&gt; insertion_sort((10, 1, 3, 5, 2))\n    [1, 2, 3, 5, 10]\n\n    &gt;&gt;&gt; insertion_sort((31, 41, 59, 26, 41, 58))\n    [26, 31, 41, 41, 58, 59]\n\n    \"\"\"\n\n    it = iter(it)\n    result = [it.next()]\n    for index, val in enumerate(it):\n        i = index\n        result.append(val)\n        while i &gt;= 0 and result[i] &gt; val:\n            result[i+1], i = result[i], i-1\n        result[i+1] = val\n\n    return result</code>\n\n<p>There\u2019s a lovely sentence at the start of the summary:</p>\n\n<blockquote class=\"posterous_short_quote\">\n  <p>A good algorithm is like a sharp knife \u2014 it does exactly what it \n  is supposed to do with a minimum amount of applied effort.</p>\n</blockquote>", "locations": [], "user": {"body": "I am much more prolific in Twitter. See http://twitter.com/arsatiki\r\n", "profile_pic": "http://files.posterous.com/user_profile_pics/30986/che_baarissa_ilman_paitaa.png", "display_name": "Antti Rasinen", "firstname": "Antti", "lastname": "Rasinen", "profile_image_35": "http://files.posterous.com/user_profile_pics/30986/che_baarissa_ilman_paitaa_thumb.png", "last_activity": "2012/02/23 08:30:10 -0800", "nickname": "Antti", "id": 29785, "profile_url": "http://posterous.com/users/KPdfsrBQmB"}, "date": "2007-08-10 04:33:30+03:00", "replies_count": 0, "body_excerpt": "The first few chapters are 100% pure introduction. Definitions, discussion, algorithm analysis etc. Useful stuff and worth reviewing once in a while. There are two sorting algorithms given: insertion sort and merge sort. Given that Python lists ha...", "slug": "first-chapters", "is_private": false, "likes_count": 0, "privatestring": "ouyrtxqDns", "number_of_comments": 0, "comments_count": 0, "current_member": "", "author_display_name": "Antti Rasinen", "post_image_115": null, "is_owned_by_current_user": null}